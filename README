                                ROS2LS_BRIDGE

                                 Erik Jansson
                                Tommy Olofsson


INTRODUCTION
    This is a bridge generator that enables exporting and importing topics to/from a ROS
    system. A generated bridge sits inside the ROS system. Thus, traffic going towards
    other nodes in the ROS system is referred to traffic on the "inside" of
    the bridge, while traffic going towards other nodes outside the ROS system
    is referred to as traffic on the "outside" of the bridge.


                       +----------------------+
                       |         ROS          |
                       |                   +--------+
                       |               <== |        | <====
                       |               IN  | BRIDGE |  OUT
                       |               ==> |        | =====>
                       |                   +--------+
                       |                      |
                       +----------------------+

    Traffic on the outside is currently sent via LabComm over TCP (although
    there are plans to extend this to other transport layers in the future).
    Communication on the inside is performed with ROSComm over TCP.

    Currently, the bridge is written in Python but plans exists to migrate the
    code base to C/C++.

RUNNING BRIDGE GENERATOR AS STANDALONE TOOL
    The generator can be run as:

        $ rosrun generator generator.py -c examples/pingpong_conf.xml

    It can also be run with the --help parameter to display info about other
    parameters.

RUNNING BRIDGE GENERATOR AS VIA SERVICE INTERFACE
    The generator can be run as a service by:

        $ rosrun generator generator_service_node.py

    This will start a ROS-node with a service that does the same thing
    as the generator. In order to work across different host systems
    all configuration is sent in the service call. In the case where a
    user whishes to use a complex configuration file (e.g with manual
    conversions and trigger rules) all files have to be included in
    the service call. (Technically, the names and contents of the
    files are sent in two parallel arrays as arguments to the
    service.)

    To use this service from another host the provided ROS client can
    be used. It takes the path to a configuration file as a command
    line argument and will automatically include all other files it
    references. It is started by:

        $ rosrun generator generator_client_node.py CONFIG_FILE

RUNNING ROS/LC PINGPONG
    First start the ROS node:

        $ rosrun ros_pingpong pingpong.py

    Then run and start the generated bridge (say it was generated with the
    name test_bridge):

        $ rosrun test_bridge main.py

    Lastly, start the lc_pingpong node and everything should work:

        $ ./src/pingpong.py
